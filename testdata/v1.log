[database] sqlxx-db already started. (use --restart otherwise)
=== RUN   TestSave_Save
begin sqlxx_test.User
{Model:{ID:0 Username:thoas IsActive:false CreatedAt:2017-05-06 23:10:02 +0000 UTC UpdatedAt:0001-01-01 00:00:00 +0000 UTC DeletedAt:<nil> APIKeyID:0 APIKey:{ID:0 Key: Partner:{ID:0 Name:} PartnerID:0} APIKeyPtr:<nil> AvatarID:{Int64:0 Valid:false} Avatar:<nil> Avatars:[] Profile:{ID:0 UserID:0 FirstName: LastName:}} ModelName:User TableName:users PrimaryKeyField:%!v(PANIC=runtime error: invalid memory address or nil pointer dereference) Fields:map[] Associations:map[]}
begin sqlxx_test.APIKey
{Model:{ID:0 Key: Partner:{ID:0 Name:} PartnerID:0} ModelName:APIKey TableName:api_keys PrimaryKeyField:%!v(PANIC=runtime error: invalid memory address or nil pointer dereference) Fields:map[] Associations:map[]}
begin sqlxx_test.Partner
{Model:{ID:0 Name:} ModelName:Partner TableName:partners PrimaryKeyField:%!v(PANIC=runtime error: invalid memory address or nil pointer dereference) Fields:map[] Associations:map[]}
(sqlxx.Schema) {
 Model: (sqlxx_test.Partner) {
  ID: (int) 0,
  Name: (string) ""
 },
 ModelName: (string) (len=7) "Partner",
 TableName: (string) (len=8) "partners",
 PrimaryKeyField: (sqlxx.Field) Field{model:Partner pk:ID table:partners name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
 Fields: (map[string]sqlxx.Field) (len=2) {
  (string) (len=2) "ID": (sqlxx.Field) Field{model:Partner pk:ID table:partners name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
  (string) (len=4) "Name": (sqlxx.Field) Field{model:Partner pk:ID table:partners name:Name column:name, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false}
 },
 Associations: (map[string]sqlxx.Field) {
 }
}
end sqlxx_test.Partner
(sqlxx.Schema) {
 Model: (sqlxx_test.APIKey) {
  ID: (int) 0,
  Key: (string) "",
  Partner: (sqlxx_test.Partner) {
   ID: (int) 0,
   Name: (string) ""
  },
  PartnerID: (int) 0
 },
 ModelName: (string) (len=6) "APIKey",
 TableName: (string) (len=8) "api_keys",
 PrimaryKeyField: (sqlxx.Field) Field{model:APIKey pk:ID table:api_keys name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
 Fields: (map[string]sqlxx.Field) (len=3) {
  (string) (len=2) "ID": (sqlxx.Field) Field{model:APIKey pk:ID table:api_keys name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
  (string) (len=3) "Key": (sqlxx.Field) Field{model:APIKey pk:ID table:api_keys name:Key column:key, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false},
  (string) (len=9) "PartnerID": (sqlxx.Field) Field{model:APIKey pk:ID table:api_keys name:PartnerID column:partner_id, association:undefined, fk:<nil>, is_pk:false, is_fk:true, is_assoc: false}
 },
 Associations: (map[string]sqlxx.Field) (len=1) {
  (string) (len=7) "Partner": (sqlxx.Field) Field{model:APIKey pk:ID table:api_keys name:Partner column:partner_id, association:one, fk:{{ model:APIKey tb:api_keys field:PartnerID col:partner_id assoc:Partner -- reference: {{ model:Partner tb:partners field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:false, is_assoc: true}
 }
}
end sqlxx_test.APIKey
begin sqlxx_test.Media
{Model:{ID:0 Path: CreatedAt:0001-01-01 00:00:00 +0000 UTC UpdatedAt:0001-01-01 00:00:00 +0000 UTC} ModelName:Media TableName:media PrimaryKeyField:%!v(PANIC=runtime error: invalid memory address or nil pointer dereference) Fields:map[] Associations:map[]}
(sqlxx.Schema) {
 Model: (sqlxx_test.Media) {
  ID: (int) 0,
  Path: (string) "",
  CreatedAt: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
  UpdatedAt: (time.Time) 0001-01-01 00:00:00 +0000 UTC
 },
 ModelName: (string) (len=5) "Media",
 TableName: (string) (len=5) "media",
 PrimaryKeyField: (sqlxx.Field) Field{model:Media pk:ID table:media name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
 Fields: (map[string]sqlxx.Field) (len=4) {
  (string) (len=2) "ID": (sqlxx.Field) Field{model:Media pk:ID table:media name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
  (string) (len=4) "Path": (sqlxx.Field) Field{model:Media pk:ID table:media name:Path column:path, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false},
  (string) (len=9) "CreatedAt": (sqlxx.Field) Field{model:Media pk:ID table:media name:CreatedAt column:created_at, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false},
  (string) (len=9) "UpdatedAt": (sqlxx.Field) Field{model:Media pk:ID table:media name:UpdatedAt column:updated_at, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false}
 },
 Associations: (map[string]sqlxx.Field) {
 }
}
end sqlxx_test.Media
begin sqlxx_test.Avatar
{Model:{ID:0 Path: UserID:0 FilterID:0 CreatedAt:0001-01-01 00:00:00 +0000 UTC UpdatedAt:0001-01-01 00:00:00 +0000 UTC Filter:{ID:0 Name:} FilterPtr:<nil>} ModelName:Avatar TableName:avatars PrimaryKeyField:%!v(PANIC=runtime error: invalid memory address or nil pointer dereference) Fields:map[] Associations:map[]}
begin sqlxx_test.AvatarFilter
{Model:{ID:0 Name:} ModelName:AvatarFilter TableName:avatar_filters PrimaryKeyField:%!v(PANIC=runtime error: invalid memory address or nil pointer dereference) Fields:map[] Associations:map[]}
(sqlxx.Schema) {
 Model: (sqlxx_test.AvatarFilter) {
  ID: (int) 0,
  Name: (string) ""
 },
 ModelName: (string) (len=12) "AvatarFilter",
 TableName: (string) (len=14) "avatar_filters",
 PrimaryKeyField: (sqlxx.Field) Field{model:AvatarFilter pk:ID table:avatar_filters name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
 Fields: (map[string]sqlxx.Field) (len=2) {
  (string) (len=2) "ID": (sqlxx.Field) Field{model:AvatarFilter pk:ID table:avatar_filters name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
  (string) (len=4) "Name": (sqlxx.Field) Field{model:AvatarFilter pk:ID table:avatar_filters name:Name column:name, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false}
 },
 Associations: (map[string]sqlxx.Field) {
 }
}
end sqlxx_test.AvatarFilter
(sqlxx.Schema) {
 Model: (sqlxx_test.Avatar) {
  ID: (int) 0,
  Path: (string) "",
  UserID: (int) 0,
  FilterID: (int) 0,
  CreatedAt: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
  UpdatedAt: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
  Filter: (sqlxx_test.AvatarFilter) {
   ID: (int) 0,
   Name: (string) ""
  },
  FilterPtr: (*sqlxx_test.AvatarFilter)(<nil>)
 },
 ModelName: (string) (len=6) "Avatar",
 TableName: (string) (len=7) "avatars",
 PrimaryKeyField: (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
 Fields: (map[string]sqlxx.Field) (len=6) {
  (string) (len=2) "ID": (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
  (string) (len=4) "Path": (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:Path column:path, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false},
  (string) (len=6) "UserID": (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:UserID column:user_id, association:undefined, fk:<nil>, is_pk:false, is_fk:true, is_assoc: false},
  (string) (len=8) "FilterID": (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:FilterID column:filter_id, association:undefined, fk:<nil>, is_pk:false, is_fk:true, is_assoc: false},
  (string) (len=9) "CreatedAt": (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:CreatedAt column:created_at, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false},
  (string) (len=9) "UpdatedAt": (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:UpdatedAt column:updated_at, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false}
 },
 Associations: (map[string]sqlxx.Field) (len=2) {
  (string) (len=6) "Filter": (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:Filter column:filter_id, association:one, fk:{{ model:Avatar tb:avatars field:FilterID col:filter_id assoc:Filter -- reference: {{ model:AvatarFilter tb:avatar_filters field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:false, is_assoc: true},
  (string) (len=9) "FilterPtr": (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:FilterPtr column:filter_ptr_id, association:one, fk:{{ model:Avatar tb:avatars field:FilterID col:filter_ptr_id assoc:FilterPtr -- reference: {{ model:AvatarFilter tb:avatar_filters field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:true, is_assoc: true}
 }
}
end sqlxx_test.Avatar
begin sqlxx_test.Profile
{Model:{ID:0 UserID:0 FirstName: LastName:} ModelName:Profile TableName:profiles PrimaryKeyField:%!v(PANIC=runtime error: invalid memory address or nil pointer dereference) Fields:map[] Associations:map[]}
(sqlxx.Schema) {
 Model: (sqlxx_test.Profile) {
  ID: (int) 0,
  UserID: (int) 0,
  FirstName: (string) "",
  LastName: (string) ""
 },
 ModelName: (string) (len=7) "Profile",
 TableName: (string) (len=8) "profiles",
 PrimaryKeyField: (sqlxx.Field) Field{model:Profile pk:ID table:profiles name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
 Fields: (map[string]sqlxx.Field) (len=4) {
  (string) (len=6) "UserID": (sqlxx.Field) Field{model:Profile pk:ID table:profiles name:UserID column:user_id, association:undefined, fk:<nil>, is_pk:false, is_fk:true, is_assoc: false},
  (string) (len=9) "FirstName": (sqlxx.Field) Field{model:Profile pk:ID table:profiles name:FirstName column:first_name, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false},
  (string) (len=8) "LastName": (sqlxx.Field) Field{model:Profile pk:ID table:profiles name:LastName column:last_name, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false},
  (string) (len=2) "ID": (sqlxx.Field) Field{model:Profile pk:ID table:profiles name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false}
 },
 Associations: (map[string]sqlxx.Field) {
 }
}
end sqlxx_test.Profile
(sqlxx.Schema) {
 Model: (sqlxx_test.User) {
  ID: (int) 0,
  Username: (string) (len=5) "thoas",
  IsActive: (bool) false,
  CreatedAt: (time.Time) 2017-05-06 23:10:02 +0000 UTC,
  UpdatedAt: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
  DeletedAt: (*time.Time)(<nil>),
  APIKeyID: (int) 0,
  APIKey: (sqlxx_test.APIKey) {
   ID: (int) 0,
   Key: (string) "",
   Partner: (sqlxx_test.Partner) {
    ID: (int) 0,
    Name: (string) ""
   },
   PartnerID: (int) 0
  },
  APIKeyPtr: (*sqlxx_test.APIKey)(<nil>),
  AvatarID: (sql.NullInt64) {
   Int64: (int64) 0,
   Valid: (bool) false
  },
  Avatar: (*sqlxx_test.Media)(<nil>),
  Avatars: ([]sqlxx_test.Avatar) <nil>,
  Profile: (sqlxx_test.Profile) {
   ID: (int) 0,
   UserID: (int) 0,
   FirstName: (string) "",
   LastName: (string) ""
  }
 },
 ModelName: (string) (len=4) "User",
 TableName: (string) (len=5) "users",
 PrimaryKeyField: (sqlxx.Field) Field{model:User pk:ID table:users name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
 Fields: (map[string]sqlxx.Field) (len=8) {
  (string) (len=9) "UpdatedAt": (sqlxx.Field) Field{model:User pk:ID table:users name:UpdatedAt column:updated_at, association:undefined, fk:<nil>, is_pk:false, is_fk:true, is_assoc: false},
  (string) (len=9) "DeletedAt": (sqlxx.Field) Field{model:User pk:ID table:users name:DeletedAt column:deleted_at, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false},
  (string) (len=8) "APIKeyID": (sqlxx.Field) Field{model:User pk:ID table:users name:APIKeyID column:api_key_id, association:undefined, fk:<nil>, is_pk:false, is_fk:true, is_assoc: false},
  (string) (len=8) "AvatarID": (sqlxx.Field) Field{model:User pk:ID table:users name:AvatarID column:avatar_id, association:undefined, fk:<nil>, is_pk:false, is_fk:true, is_assoc: false},
  (string) (len=2) "ID": (sqlxx.Field) Field{model:User pk:ID table:users name:ID column:id, association:undefined, fk:<nil>, is_pk:true, is_fk:true, is_assoc: false},
  (string) (len=8) "Username": (sqlxx.Field) Field{model:User pk:ID table:users name:Username column:username, association:undefined, fk:<nil>, is_pk:false, is_fk:false, is_assoc: false},
  (string) (len=8) "IsActive": (sqlxx.Field) Field{model:User pk:ID table:users name:IsActive column:is_active, association:undefined, fk:<nil>, is_pk:false, is_fk:true, is_assoc: false},
  (string) (len=9) "CreatedAt": (sqlxx.Field) Field{model:User pk:ID table:users name:CreatedAt column:created_at, association:undefined, fk:<nil>, is_pk:false, is_fk:true, is_assoc: false}
 },
 Associations: (map[string]sqlxx.Field) (len=9) {
  (string) (len=14) "APIKey.Partner": (sqlxx.Field) Field{model:APIKey pk:ID table:api_keys name:Partner column:partner_id, association:one, fk:{{ model:APIKey tb:api_keys field:PartnerID col:partner_id assoc:Partner -- reference: {{ model:Partner tb:partners field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:false, is_assoc: true},
  (string) (len=17) "APIKeyPtr.Partner": (sqlxx.Field) Field{model:APIKey pk:ID table:api_keys name:Partner column:partner_id, association:one, fk:{{ model:APIKey tb:api_keys field:PartnerID col:partner_id assoc:Partner -- reference: {{ model:Partner tb:partners field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:false, is_assoc: true},
  (string) (len=7) "Profile": (sqlxx.Field) Field{model:User pk:ID table:users name:Profile column:profile_id, association:one, fk:{{ model:User tb:users field:ProfileID col:profile_id assoc:Profile -- reference: {{ model:Profile tb:profiles field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:false, is_assoc: true},
  (string) (len=7) "Avatars": (sqlxx.Field) Field{model:User pk:ID table:users name:Avatars column:avatars_id, association:many, fk:{{ model:Avatar tb:avatars field:UserID col:user_id assoc:User -- reference: {{ model:User tb:users field:ID col:id assoc:Avatars -- reference: <nil> }} }}, is_pk:false, is_fk:false, is_assoc: true},
  (string) (len=14) "Avatars.Filter": (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:Filter column:filter_id, association:one, fk:{{ model:Avatar tb:avatars field:FilterID col:filter_id assoc:Filter -- reference: {{ model:AvatarFilter tb:avatar_filters field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:false, is_assoc: true},
  (string) (len=17) "Avatars.FilterPtr": (sqlxx.Field) Field{model:Avatar pk:ID table:avatars name:FilterPtr column:filter_ptr_id, association:one, fk:{{ model:Avatar tb:avatars field:FilterID col:filter_ptr_id assoc:FilterPtr -- reference: {{ model:AvatarFilter tb:avatar_filters field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:true, is_assoc: true},
  (string) (len=6) "APIKey": (sqlxx.Field) Field{model:User pk:ID table:users name:APIKey column:api_key_id, association:one, fk:{{ model:User tb:users field:APIKeyID col:api_key_id assoc:APIKey -- reference: {{ model:APIKey tb:api_keys field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:false, is_assoc: true},
  (string) (len=9) "APIKeyPtr": (sqlxx.Field) Field{model:User pk:ID table:users name:APIKeyPtr column:api_key_ptr_id, association:one, fk:{{ model:User tb:users field:APIKeyID col:api_key_ptr_id assoc:APIKeyPtr -- reference: {{ model:APIKey tb:api_keys field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:true, is_assoc: true},
  (string) (len=6) "Avatar": (sqlxx.Field) Field{model:User pk:ID table:users name:Avatar column:avatar_id, association:one, fk:{{ model:User tb:users field:AvatarID col:avatar_id assoc:Avatar -- reference: {{ model:Media tb:media field:ID col:id assoc: -- reference: <nil> }} }}, is_pk:false, is_fk:false, is_assoc: true}
 }
}
